using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net.Http.Headers;
using System.Threading.Tasks;
using Microsoft.Graph;

public class EmailProcessador
{
    private readonly GraphServiceClient _graphClient;

    // Contador para diferenciar arquivos baixados na mesma execução
    private static int _contadorArquivos = 0;

    // Conjunto de arquivos já baixados (nomes finais), para evitar duplicação
    private static HashSet<string> _arquivosBaixados = new HashSet<string>();

    // Caminho local onde guardamos a lista de arquivos já baixados entre execuções
    private readonly string _pathJaBaixados = @"C:\Downloads\jaBaixados.txt";

    /// <summary>
    /// Construtor: recebe o token (Bearer) e carrega a lista de anexos já baixados de um arquivo.
    /// </summary>
    public EmailProcessador(string token)
    {
        _graphClient = new GraphServiceClient(
            new DelegateAuthenticationProvider(requestMessage =>
            {
                requestMessage.Headers.Authorization =
                    new AuthenticationHeaderValue("Bearer", token);
                // Em .NET 4.5.2, não existe Task.CompletedTask, então:
                return Task.FromResult(0);
            })
        );

        // Carrega o histórico de nomes já baixados
        CarregarArquivosBaixados();
    }

    /// <summary>
    /// Lê toda a caixa de entrada de 'mailBox', aplicando filtros:
    /// - Só e-mails não lidos e recebidos após 'minDate'
    /// - Assunto deve conter 'assuntoObrigatorio'
    /// - Ignora e-mails do próprio mailbox (se 'ignorarEmailPropriaConta' = true)
    /// - Ignora domínios listados em 'dominiosIgnorarSplit' (".com", "gmail.com", etc.)
    /// - Ignora se assunto contiver alguma palavra de 'assuntoIgnorarSplit'
    /// - Para cada anexo, verifica se o nome contém 'nomePermitido' 
    ///   e se a extensão está em 'extensoesSplit' (ex: ".pdf;.xlsx")
    /// - Salva o anexo usando data/hora no início + "((n))" antes da extensão
    /// - Se o arquivo (nome final) já existe, não baixa novamente
    /// - Marca como lido e move o e-mail para "Processados365"
    /// </summary>
    public async Task BaixarAnexosFiltradosAsync(
        string mailBox,
        string pastaDestino,
        DateTime minDate,
        string assuntoObrigatorio,      // ex: "relatorio"
        string nomePermitido,           // ex: "formulario"
        string extensoesSplit,          // ex: ".pdf;.xlsx"
        string dominiosIgnorarSplit,    // ex: "gmail.com;hotmail.com"
        string assuntoIgnorarSplit,     // ex: "spam;teste"
        bool ignorarEmailPropriaConta
    )
    {
        // 1) Montar listas para extensões, domínios e assunto proibido 
        var extsPermitidas = extensoesSplit?
            .Split(';')
            .Select(x => x.Trim().ToLower())
            .Where(x => !string.IsNullOrEmpty(x))
            .ToList()
            ?? new List<string>();

        var dominiosIgnorar = dominiosIgnorarSplit?
            .Split(';')
            .Select(x => x.Trim().ToLower())
            .Where(x => !string.IsNullOrEmpty(x))
            .ToList()
            ?? new List<string>();

        var assuntoIgnorar = assuntoIgnorarSplit?
            .Split(';')
            .Select(x => x.Trim().ToLower())
            .Where(x => !string.IsNullOrEmpty(x))
            .ToList()
            ?? new List<string>();

        // 2) Garante a pasta local
        if (!Directory.Exists(pastaDestino))
            Directory.CreateDirectory(pastaDestino);

        // 3) Cria/verifica pasta "Processados365" no nível raiz
        await CriarPastaSeNaoExisteNoRaizAsync(mailBox, "Processados365");

        // 4) Obter todas as mensagens da Inbox (paginação)
        var messages = await _graphClient
            .Users[mailBox]
            .MailFolders["Inbox"]
            .Messages
            .Request()
            .Expand("attachments")
            .GetAsync();

        // 5) Loop de paginação
        while (messages != null && messages.Count > 0)
        {
            foreach (var message in messages)
            {
                try
                {
                    // a) Se já estiver lido, ignora
                    if (message.IsRead == true)
                        continue;

                    // b) Filtra data mínima
                    if (message.ReceivedDateTime < minDate)
                        continue;

                    // c) Assunto deve conter 'assuntoObrigatorio'
                    var subjectLower = (message.Subject ?? "").ToLower();
                    if (!string.IsNullOrEmpty(assuntoObrigatorio))
                    {
                        if (!subjectLower.Contains(assuntoObrigatorio.ToLower()))
                            continue;
                    }

                    // d) Ignora e-mail da própria conta, se configurado
                    var senderAddress = message.Sender?.EmailAddress?.Address ?? "";
                    if (ignorarEmailPropriaConta &&
                        senderAddress.Equals(mailBox, StringComparison.OrdinalIgnoreCase))
                    {
                        continue;
                    }

                    // e) Ignora domínios
                    var dominioRemetente = senderAddress.Split('@').LastOrDefault()?.ToLower() ?? "";
                    bool dominioBloqueado = dominiosIgnorar.Any(d => dominioRemetente.Contains(d));
                    if (dominioBloqueado)
                        continue;

                    // f) Ignora assunto proibido
                    bool temAssuntoProibido = assuntoIgnorar.Any(ai => subjectLower.Contains(ai));
                    if (temAssuntoProibido)
                        continue;

                    // g) Se não tem anexos, pula
                    if (message.HasAttachments != true || message.Attachments == null)
                        continue;

                    bool baixouAlgumAnexo = false;

                    foreach (var attachment in message.Attachments)
                    {
                        if (attachment is FileAttachment fileAttachment)
                        {
                            // Verifica se o anexo contém 'nomePermitido'
                            string nomeAnexoLower = fileAttachment.Name.ToLower();
                            bool contemNome = !string.IsNullOrEmpty(nomePermitido)
                                ? nomeAnexoLower.Contains(nomePermitido.ToLower())
                                : true; // se nomePermitido vazio, não filtra

                            // Verifica se a extensão está nas permitidas
                            bool extensaoOk = extsPermitidas.Count > 0
                                ? extsPermitidas.Any(ext => 
                                    nomeAnexoLower.EndsWith(ext, StringComparison.OrdinalIgnoreCase))
                                : true; // se extsPermitidas vazio, não filtra

                            if (!contemNome || !extensaoOk)
                                continue;

                            // Monta um novo nome com Data/Hora e contador ((n))
                            // Exemplo: 20250221_103045_ArquivoOriginal((1)).pdf
                            _contadorArquivos++;
                            string extensao = Path.GetExtension(fileAttachment.Name);
                            string nomeBase = Path.GetFileNameWithoutExtension(fileAttachment.Name);

                            string prefixoData = DateTime.Now.ToString("yyyyMMdd_HHmmss");
                            string sufixo = $"(({_contadorArquivos}))";

                            // Novo nome final
                            string novoNome = $"{prefixoData}_{nomeBase}{sufixo}{extensao}";
                            string filePath = Path.Combine(pastaDestino, novoNome);

                            // Se já baixamos (ou já existe em disco), pula
                            if (_arquivosBaixados.Contains(novoNome) || File.Exists(filePath))
                            {
                                Console.WriteLine($"Arquivo já baixado/existente: {filePath}");
                                continue;
                            }

                            // Salva em disco
                            File.WriteAllBytes(filePath, fileAttachment.ContentBytes);
                            Console.WriteLine($"Baixado: {filePath}");

                            // Marca como baixado
                            _arquivosBaixados.Add(novoNome);
                            baixouAlgumAnexo = true;
                        }
                    }

                    // Se baixou algo, marcar como lido e mover
                    if (baixouAlgumAnexo)
                    {
                        // Marca como lido
                        message.IsRead = true;
                        await _graphClient
                            .Users[mailBox]
                            .Messages[message.Id]
                            .Request()
                            .UpdateAsync(message);

                        // Move p/ pasta "Processados365"
                        await _graphClient
                            .Users[mailBox]
                            .Messages[message.Id]
                            .Move("Processados365")
                            .Request()
                            .PostAsync();

                        Console.WriteLine($"E-mail movido para 'Processados365': {message.Subject}");
                    }
                }
                catch (Exception ex)
                {
                    // Se der erro em um e-mail, pode logar ou tratar
                    Console.WriteLine($"ERRO processando a mensagem {message.Id}: {ex.Message}");
                }
            }

            // Próxima página
            if (messages.NextPageRequest != null)
            {
                messages = await messages.NextPageRequest.GetAsync();
            }
            else
            {
                break;
            }
        }

        // Salvar o histórico atualizado (para não baixar de novo em outra execução)
        SalvarArquivosBaixados();
    }


private void CarregarArquivosBaixados()
    {
        if (File.Exists(_pathJaBaixados))
        {
            var lines = File.ReadAllLines(_pathJaBaixados);
            _arquivosBaixados = new HashSet<string>(lines);
        }
        else
        {
            _arquivosBaixados = new HashSet<string>();
        }
    }

    /// <summary>
    /// Salva no arquivo local (em '_pathJaBaixados') os nomes de arquivos baixados,
    /// para não duplicar em outras execuções.
    /// </summary>
    private void SalvarArquivosBaixados()
    {
        // Garante a pasta
        var dir = Path.GetDirectoryName(_pathJaBaixados);
        if (!Directory.Exists(dir))
            Directory.CreateDirectory(dir);

        File.WriteAllLines(_pathJaBaixados, _arquivosBaixados);
    }
}


