public async Task BaixarAnexosFiltradosAsync(
    string mailBox,
    string pastaDestino,
    DateTime minDate,
    string assuntoObrigatorio,
    string nomePermitido,
    string extensoesSplit,
    bool ignorarEmailPropriaConta
)
{
    // -------------------------------------------------------------------
    // A) Histórico dos nomes COMPLETOS de anexos já baixados
    // -------------------------------------------------------------------
    string pathJaBaixados = @"C:\Downloads\jaBaixados.txt";
    var historicoCompleto = new List<string>();

    void CarregarHistorico()
    {
        if (File.Exists(pathJaBaixados))
            historicoCompleto = File.ReadAllLines(pathJaBaixados).ToList();
        else
            historicoCompleto = new List<string>();
    }

    void SalvarHistorico()
    {
        var dir = Path.GetDirectoryName(pathJaBaixados);
        if (!Directory.Exists(dir))
            Directory.CreateDirectory(dir);
        File.WriteAllLines(pathJaBaixados, historicoCompleto);
    }

    CarregarHistorico();

    // -------------------------------------------------------------------
    // B) Histórico dos InternetMessageIds dos e-mails já processados
    // -------------------------------------------------------------------
    string pathEmailsProcessados = @"C:\Downloads\emailsProcessados.txt";
    var emailsProcessados = new HashSet<string>();

    void CarregarEmailsProcessados()
    {
        if (File.Exists(pathEmailsProcessados))
            emailsProcessados = new HashSet<string>(File.ReadAllLines(pathEmailsProcessados));
        else
            emailsProcessados = new HashSet<string>();
    }

    void SalvarEmailsProcessados()
    {
        var dir = Path.GetDirectoryName(pathEmailsProcessados);
        if (!Directory.Exists(dir))
            Directory.CreateDirectory(dir);
        File.WriteAllLines(pathEmailsProcessados, emailsProcessados);
    }

    CarregarEmailsProcessados();

    // -------------------------------------------------------------------
    // C) Configurar filtro de extensões
    // -------------------------------------------------------------------
    var extsPermitidas = extensoesSplit?
        .Split(';')
        .Select(x => x.Trim().ToLower())
        .Where(x => !string.IsNullOrEmpty(x))
        .ToList()
        ?? new List<string>();

    // -------------------------------------------------------------------
    // D) Garante a pasta local de destino
    // -------------------------------------------------------------------
    if (!Directory.Exists(pastaDestino))
        Directory.CreateDirectory(pastaDestino);

    // -------------------------------------------------------------------
    // E) Buscar mensagens da Inbox (paginação), expandindo anexos
    // -------------------------------------------------------------------
    var messages = await _graphClient
        .Users[mailBox]
        .MailFolders["Inbox"]
        .Messages
        .Request()
        .Expand("attachments")
        .GetAsync();

    // Contador para diferenciar nomes dentro da mesma execução
    int contadorArquivos = 0;

    while (messages != null && messages.Count > 0)
    {
        foreach (var message in messages)
        {
            try
            {
                // 1) Se o e-mail já estiver lido, pula
                if (message.IsRead == true)
                    continue;

                // 2) Filtra por data mínima
                if (message.ReceivedDateTime < minDate)
                    continue;

                // 3) O assunto deve conter 'assuntoObrigatorio'
                var subjectLower = (message.Subject ?? "").ToLower();
                if (!string.IsNullOrEmpty(assuntoObrigatorio) &&
                    !subjectLower.Contains(assuntoObrigatorio.ToLower()))
                {
                    continue;
                }

                // 4) Ignorar e-mail da própria conta, se configurado
                var senderAddress = message.Sender?.EmailAddress?.Address ?? "";
                if (ignorarEmailPropriaConta &&
                    senderAddress.Equals(mailBox, StringComparison.OrdinalIgnoreCase))
                {
                    continue;
                }

                // 5) Verifica se este e-mail já foi processado (InternetMessageId)
                string internetId = message.InternetMessageId;
                if (!string.IsNullOrEmpty(internetId) && emailsProcessados.Contains(internetId))
                {
                    Console.WriteLine($"E-mail já processado: {internetId}");
                    continue;
                }

                // 6) Se não tem anexos, pula
                if (message.HasAttachments != true || message.Attachments == null)
                    continue;

                bool baixouAlgumAnexo = false;
                foreach (var attachment in message.Attachments)
                {
                    if (attachment is FileAttachment fileAttachment)
                    {
                        // Filtro: o nome do anexo deve conter 'nomePermitido', se informado
                        string nomeAnexoLower = fileAttachment.Name.ToLower();
                        bool contemNome = string.IsNullOrEmpty(nomePermitido) ||
                                           nomeAnexoLower.Contains(nomePermitido.ToLower());

                        // Filtro: a extensão deve estar nas permitidas, se houver filtro
                        bool extensaoOk = extsPermitidas.Count == 0 ||
                                          extsPermitidas.Any(ext =>
                                              nomeAnexoLower.EndsWith(ext, StringComparison.OrdinalIgnoreCase));

                        if (!contemNome || !extensaoOk)
                            continue;

                        // --------------------------------------------------------------------
                        // Gerar o nome COMPLETO com prefixo de data/hora e sufixo ((n))
                        // --------------------------------------------------------------------
                        string prefixoData = DateTime.Now.ToString("yyyyMMdd_HHmmss_");
                        string extensao = Path.GetExtension(fileAttachment.Name);
                        string nomeBase = Path.GetFileNameWithoutExtension(fileAttachment.Name);

                        contadorArquivos++;
                        string sufixo = $"(({contadorArquivos}))";

                        string novoNomeCompleto = $"{prefixoData}{nomeBase}{sufixo}{extensao}";
                        string filePath = Path.Combine(pastaDestino, novoNomeCompleto);

                        // Verifica se o nome completo já foi registrado no histórico
                        if (historicoCompleto.Contains(novoNomeCompleto))
                        {
                            Console.WriteLine($"Ignorando, anexo já baixado: {novoNomeCompleto}");
                            continue;
                        }

                        // Se o arquivo já existir no disco, registra e pula
                        if (File.Exists(filePath))
                        {
                            Console.WriteLine($"Arquivo já existe no disco: {filePath}");
                            if (!historicoCompleto.Contains(novoNomeCompleto))
                                historicoCompleto.Add(novoNomeCompleto);
                            continue;
                        }

                        // Salva o arquivo em disco
                        File.WriteAllBytes(filePath, fileAttachment.ContentBytes);
                        Console.WriteLine($"Baixado: {filePath}");

                        // Registra o nome completo no histórico
                        historicoCompleto.Add(novoNomeCompleto);
                        baixouAlgumAnexo = true;
                    }
                }

                if (baixouAlgumAnexo)
                {
                    // Se baixou algum anexo, marca o e-mail como lido e move para "Processados365"
                    message.IsRead = true;
                    await _graphClient
                        .Users[mailBox]
                        .Messages[message.Id]
                        .Request()
                        .UpdateAsync(message);

                    await _graphClient
                        .Users[mailBox]
                        .Messages[message.Id]
                        .Move("Processados365")
                        .Request()
                        .PostAsync();

                    Console.WriteLine($"E-mail movido para 'Processados365': {message.Subject}");

                    // Registra somente se baixou anexo
                    if (!string.IsNullOrEmpty(message.InternetMessageId))
                        emailsProcessados.Add(message.InternetMessageId);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erro ao processar a mensagem {message.Id}: {ex.Message}");
            }
        }

        if (messages.NextPageRequest != null)
            messages = await messages.NextPageRequest.GetAsync();
        else
            break;
    }

    // Salva os históricos atualizados
    SalvarHistorico();
    SalvarEmailsProcessados();

    Console.WriteLine("Processo concluído!");
}
