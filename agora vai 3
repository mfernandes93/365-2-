public async Task BaixarAnexosFiltradosAsync(
    string mailBox,
    string pastaDestino,
    DateTime minDate,
    string assuntoObrigatorio,
    string nomePermitido,
    string extensoesSplit,
    string dominiosIgnorarSplit,
    string assuntoIgnorarSplit,
    bool ignorarEmailPropriaConta
)
{
    // 1) Variáveis de histórico
    string pathJaBaixados = @"C:\Downloads\jaBaixados.txt";
    var historicoCompleto = new List<string>(); // Armazena nomes COMPLETOS do arquivo

    // 2) Carrega os nomes COMPLETOS do arquivo
    void CarregarHistorico()
    {
        if (File.Exists(pathJaBaixados))
        {
            var lines = File.ReadAllLines(pathJaBaixados);
            historicoCompleto = lines.ToList();
        }
        else
        {
            historicoCompleto = new List<string>();
        }
    }

    // 3) Salva os nomes COMPLETOS no arquivo
    void SalvarHistorico()
    {
        var dir = Path.GetDirectoryName(pathJaBaixados);
        if (!Directory.Exists(dir))
            Directory.CreateDirectory(dir);

        File.WriteAllLines(pathJaBaixados, historicoCompleto);
    }

    CarregarHistorico();
    int contadorArquivos = 0;

    // 4) Listas de filtro
    var extsPermitidas = extensoesSplit?
        .Split(';')
        .Select(x => x.Trim().ToLower())
        .Where(x => !string.IsNullOrEmpty(x))
        .ToList()
        ?? new List<string>();

    var dominiosIgnorar = dominiosIgnorarSplit?
        .Split(';')
        .Select(x => x.Trim().ToLower())
        .Where(x => !string.IsNullOrEmpty(x))
        .ToList()
        ?? new List<string>();

    var assuntoIgnorar = assuntoIgnorarSplit?
        .Split(';')
        .Select(x => x.Trim().ToLower())
        .Where(x => !string.IsNullOrEmpty(x))
        .ToList()
        ?? new List<string>();

    // 5) Garante pasta local
    if (!Directory.Exists(pastaDestino))
        Directory.CreateDirectory(pastaDestino);

    // Cria pasta Processados365 se não existir
    await CriarPastaSeNaoExisteNoRaizAsync(mailBox, "Processados365");

    // 6) Obter mensagens
    var messages = await _graphClient
        .Users[mailBox]
        .MailFolders["Inbox"]
        .Messages
        .Request()
        .Expand("attachments")
        .GetAsync();

    while (messages != null && messages.Count > 0)
    {
        foreach (var message in messages)
        {
            // a) Se já lido, pula
            if (message.IsRead == true)
                continue;

            // b) Data mínima
            if (message.ReceivedDateTime < minDate)
                continue;

            // c) Assunto obrigatorio
            var subjectLower = (message.Subject ?? "").ToLower();
            if (!string.IsNullOrEmpty(assuntoObrigatorio) &&
                !subjectLower.Contains(assuntoObrigatorio.ToLower()))
            {
                continue;
            }

            // d) Ignorar e-mail da própria conta
            var senderAddress = message.Sender?.EmailAddress?.Address ?? "";
            if (ignorarEmailPropriaConta && 
                senderAddress.Equals(mailBox, StringComparison.OrdinalIgnoreCase))
            {
                continue;
            }

            // e) Ignorar dominios
            var dominio = senderAddress.Split('@').LastOrDefault()?.ToLower() ?? "";
            if (dominiosIgnorar.Any(d => dominio.Contains(d)))
                continue;

            // f) Ignorar assunto proibido
            if (assuntoIgnorar.Any(ai => subjectLower.Contains(ai)))
                continue;

            // g) Se não tem anexos, pula
            if (message.HasAttachments != true || message.Attachments == null)
                continue;

            bool baixouAlgumAnexo = false;

            foreach (var attachment in message.Attachments)
            {
                if (attachment is FileAttachment fileAttachment)
                {
                    // Filtro nome e extensao
                    string nomeAnexoLower = fileAttachment.Name.ToLower();

                    bool contemNome = true;
                    if (!string.IsNullOrEmpty(nomePermitido))
                        contemNome = nomeAnexoLower.Contains(nomePermitido.ToLower());

                    bool extensaoOk = true;
                    if (extsPermitidas.Count > 0)
                    {
                        extensaoOk = extsPermitidas.Any(ext =>
                            nomeAnexoLower.EndsWith(ext, StringComparison.OrdinalIgnoreCase));
                    }

                    if (!contemNome || !extensaoOk)
                        continue;

                    // Gera nome COMPLETO com prefixo data + contador
                    contadorArquivos++;
                    string extensao = Path.GetExtension(fileAttachment.Name);
                    string nomeBase = Path.GetFileNameWithoutExtension(fileAttachment.Name);

                    // Supondo que sejam exatos 14 caracteres de prefixo. 
                    // Ex.: "20250221_103045" (sem underscore extra) => 14
                    string prefixoData = DateTime.Now.ToString("yyyyMMdd_HHmmss"); 
                    // se quiser underscore => "yyyyMMdd_HHmmss_" => 15 chars => ajuste a contagem depois
                    string sufixo = $"(({contadorArquivos}))";

                    string nomeCompleto = $"{prefixoData}_{nomeBase}{sufixo}{extensao}";
                    string filePath = Path.Combine(pastaDestino, nomeCompleto);

                    // -> Trunca 14 chars de 'nomeCompleto' 
                    //    (ajuste se seu prefixo tiver 15 ou outro valor)
                    string nomeTruncadoAtual = (nomeCompleto.Length > 14)
                        ? nomeCompleto.Substring(14) 
                        : nomeCompleto;

                    // Verifica no histórico (ignorando prefixo)
                    bool jaExiste = false;
                    foreach (var oldFull in historicoCompleto)
                    {
                        // Gera oldTrunc
                        string oldTrunc = (oldFull.Length > 14) 
                            ? oldFull.Substring(14) 
                            : oldFull;

                        if (oldTrunc.Equals(nomeTruncadoAtual, StringComparison.OrdinalIgnoreCase))
                        {
                            // Já existe ignorando prefixo
                            jaExiste = true;
                            break;
                        }
                    }

                    if (jaExiste)
                    {
                        Console.WriteLine($"Ignorando, pois já baixado (ignorado prefixo): {nomeTruncadoAtual}");
                        continue;
                    }

                    // Se arquivo existir no disco com esse nome, também ignora
                    if (File.Exists(filePath))
                    {
                        Console.WriteLine($"Arquivo já existe no disco: {filePath}");
                        // E adiciona no histórico, se quiser
                        historicoCompleto.Add(nomeCompleto);
                        continue;
                    }

                    // Baixa
                    File.WriteAllBytes(filePath, fileAttachment.ContentBytes);
                    Console.WriteLine($"Baixado: {filePath}");

                    // Adiciona o nome COMPLETO no histórico
                    historicoCompleto.Add(nomeCompleto);

                    baixouAlgumAnexo = true;
                }
            }

            if (baixouAlgumAnexo)
            {
                // Marca como lido e move
                message.IsRead = true;
                await _graphClient
                    .Users[mailBox]
                    .Messages[message.Id]
                    .Request()
                    .UpdateAsync(message);

                await _graphClient
                    .Users[mailBox]
                    .Messages[message.Id]
                    .Move("Processados365")
                    .Request()
                    .PostAsync();

                Console.WriteLine($"E-mail movido p/ 'Processados365': {message.Subject}");
            }
        }

        // Paginação
        if (messages.NextPageRequest != null)
        {
            messages = await messages.NextPageRequest.GetAsync();
        }
        else
        {
            break;
        }
    }

    // Salva histórico no final, com NOMES COMPLETOS
    SalvarHistorico();
}

private async Task CriarPastaSeNaoExisteNoRaizAsync(string mailBox, string folderName)
{
    var rootFolders = await _graphClient
        .Users[mailBox]
        .MailFolders
        .Request()
        .GetAsync();

    var existe = rootFolders.FirstOrDefault(f =>
        f.DisplayName.Equals(folderName, StringComparison.OrdinalIgnoreCase));

    if (existe == null)
    {
        var nova = new MailFolder
        {
            DisplayName = folderName
        };
        await _graphClient
            .Users[mailBox]
            .MailFolders
            .Request()
            .AddAsync(nova);

        Console.WriteLine($"Pasta '{folderName}' criada no nível raiz de '{mailBox}'.");
    }
}
